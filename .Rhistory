CrossTable(test_data$left, credit_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual left', 'predicted left'))
a4 = accuracy(credit_pred, test_data$left, "Decision Tree", TRUE)
#Insert your code to build a decision tree model with 10 trials adaptive boosting here
left_boost100 <- C5.0(train_data[-8], train_data$left, trials = 10)
left_boost_pred100 <- predict(left_boost100, test_data)
CrossTable(test_data$left, left_boost_pred100,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual left', 'predicted left'))
a5 = accuracy(credit_pred, test_data$left, "Decision Tree with 10 trails boosting", TRUE)
#Insert your code to build a decision tree model with cost matrix here
rf <- randomForest(left ~ ., data = train_data)
rf_pred <- predict(rf, test_data)
a6 = accuracy(rf_pred, test_data$left, "Random Forest", TRUE)
#Insert your code
#Insert your code for stacked model
#Calculate whether your stacked model works better than the individual models above.
acc_predictions = c(a1,a2,a3,a4,a5, a6)
#acc_predictions = c(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
#names = c("Log Prediction Plain","Log Boosted","Log Step","SVM with Vanilla Kernal","SVM Radial Basis Kernal","Neural Net One Hidden Node","Neural Net Two Hidden Nodes","CTree Regression","Random Forest Classification","Ada Boost Classification")
names = c("Log Prediction Plain", "SVM with Vanilla Kernal","SVM Radial Basis Kernal","Decision C5.0 Tree Regression","Decision Tree C5.0 Regression trails 10", "Random Forest")
acc_mat <- data.frame(ModelName = names, accuracy = acc_predictions) %>% print
dotchart(acc_predictions, labels = names, main = "Accuracy of the models", xlab = "Accuracy")
setwd("~/Desktop/TO 414/Group/Predicting-Loans")
library(lubridate)
library(gmodels)
library(ggplot2)
library(dplyr)
library(class)
library(gmodels)
library(plotrix)
listings <- read.csv("Listings2013.csv")
sapply(data, function(x) sum(is.na(x)))
listings$number_of_days <- NULL
listings$principal_balance <- NULL
listings$loan_status_description <- NULL
listings$prosper_rating <- NULL
listings$listing_monthly_payment <- NULL
listings$loan_status[listings$loan_status == 1] <- 0
listings$loan_status[listings$loan_status == 4] <- 0
listings$loan_status[listings$loan_status == 2] <- 1
listings$loan_status[listings$loan_status == 3] <- 1
# remove NAs
listings <- listings[complete.cases(listings),]
listings$originaldate <- listings$loan_origination_date
listings$originaldate <- as.Date(listings$originaldate, "%m/%d/%Y")
listings$loan_origination_date <- as.Date(listings$loan_origination_date, "%m/%d/%Y")
listings$loan_origination_date <- as.numeric(listings$loan_origination_date)
listings$loan_origination_date <- listings$loan_origination_date-15705
#We split up our time variable into the four financial quarters and create a new variable for this data to be saved to.
Calculatequarters <- function(date) {
if(date <= 90) {
return("1")
} else if(date <= 182) {
return("2")
} else if(date <= 274) {
return("3")
} else {
return("4")
}
}
for(i in 1:NROW(listings$loan_origination_date)){
listings$quarters[i] <- Calculatequarters(listings$loan_origination_date[i])
}
listings$quarters <- as.integer(listings$quarters)
ggplot(aes(x=quarters), data=listings) + geom_bar(aes(fill=factor(loan_status)))
Q1 <- sum(listings$quarters == 1)
Q1_1 <- sum(listings$quarters == 1 & listings$loan_status==1)
Q1Ratio <- Q1_1/Q1
Q1Ratio
Q2 <- sum(listings$quarters == 2)
Q2_1 <- sum(listings$quarters == 2 & listings$loan_status==1)
Q2Ratio <- Q2_1/Q2
Q2Ratio
Q3 <- sum(listings$quarters == 3)
Q3_1 <- sum(listings$quarters == 3 & listings$loan_status==1)
Q3Ratio <- Q3_1/Q3
Q3Ratio
Q4 <- sum(listings$quarters == 4)
Q4_1 <- sum(listings$quarters == 4 & listings$loan_status==1)
Q4Ratio <- Q4_1/Q4
Q4Ratio
DefaultbyQuarter <- c(Q1Ratio, Q2Ratio, Q3Ratio, Q4Ratio)
plot(DefaultbyQuarter, type="o", col="blue")
Calculatemonths <- function(date2) {
if(date2 <= 31) {
return("1")
} else if(date2 <= 59) {
return("2")
} else if(date2 <= 90) {
return("3")
} else if(date2 <= 120) {
return("4")
} else if(date2 <= 151) {
return("5")
} else if(date2 <= 181) {
return("6")
} else if(date2 <= 212) {
return("7")
} else if(date2 <= 243) {
return("8")
} else if(date2 <= 273) {
return("9")
} else if(date2 <= 304) {
return("10")
} else if(date2 <= 334) {
return("11")
} else {
return("12")
}
}
listings$months <- as.integer(listings$months)
for(i in 1:NROW(listings$loan_origination_date)){
listings$months[i] <- Calculatemonths(listings$loan_origination_date[i])
}
ggplot(aes(x=months), data=listings) + geom_bar(aes(fill=factor(loan_status))) + scale_x_discrete(limits=c(1,2,3,4,5,6,7,8,9,10,11,12))
M1 <- sum(listings$months == 1)
M1_1 <- sum(listings$months == 1 & listings$loan_status==1)
M1Ratio <- M1_1/M1
M2 <- sum(listings$months == 2)
M2_1 <- sum(listings$months == 2 & listings$loan_status==1)
M2Ratio <- M2_1/M2
M3 <- sum(listings$months == 3)
M3_1 <- sum(listings$months == 3 & listings$loan_status==1)
M3Ratio <- M3_1/M3
M4 <- sum(listings$months == 4)
M4_1 <- sum(listings$months == 4 & listings$loan_status==1)
M4Ratio <- M4_1/M4
M5 <- sum(listings$months == 5)
M5_1 <- sum(listings$months == 5 & listings$loan_status==1)
M5Ratio <- M5_1/M5
M6 <- sum(listings$months == 6)
M6_1 <- sum(listings$months == 6 & listings$loan_status==1)
M6Ratio <- M6_1/M6
M7 <- sum(listings$months == 7)
M7_1 <- sum(listings$months == 7 & listings$loan_status==1)
M7Ratio <- M7_1/M7
M8 <- sum(listings$months == 8)
M8_1 <- sum(listings$months == 8 & listings$loan_status==1)
M8Ratio <- M8_1/M8
M9 <- sum(listings$months == 9)
M9_1 <- sum(listings$months == 9 & listings$loan_status==1)
M9Ratio <- M9_1/M9
M10 <- sum(listings$months == 10)
M10_1 <- sum(listings$months == 10 & listings$loan_status==1)
M10Ratio <- M10_1/M10
M11 <- sum(listings$months == 11)
M11_1 <- sum(listings$months == 11 & listings$loan_status==1)
M11Ratio <- M11_1/M11
M12 <- sum(listings$months == 12)
M12_1 <- sum(listings$months == 12 & listings$loan_status==1)
M12Ratio <- M12_1/M12
monthsratio <- c(M1Ratio,M2Ratio,M3Ratio,M4Ratio,M5Ratio,M6Ratio,M7Ratio,M8Ratio,M9Ratio,M10Ratio,M11Ratio,M12Ratio)
plot(monthsratio, type="o", col="blue")
#We create a range of months for our future data frame
monthsvector <- c(1,2,3,4,5,6,7,8,9,10,11,12)
#We use the tapply function to find the mean borrowing rate for each month.
monthsrate <- tapply(listings$borrower_rate, listings$months, mean)
#We recalculate the default ratio to a percentage to match the borrowing rate
monthsratio <- monthsratio*100
#Combine to data frame
dataframe <- data.frame(monthsvector, monthsratio, monthsrate)
#We plot the default rate up against the borrowing rate using a twoord.plot function. This enables us to look at the two line plots simultanously, but with two separate y-axes.
twoord.plot(1:12, dataframe$monthsratio, 1:12, dataframe$monthsrate, xlab="Month",
ylab="Default Rate",
rylab="Borrower Rate",
xtickpos = 1:12,
xticklab=month.name[1:12])
listings$day <- wday(listings$originaldate, label=TRUE)
summary(listings$day)
tapply(listings$loan_status, listings$day, mean)
tapply(listings$borrower_rate, listings$day, mean)
tapply(listings$amount_funded, listings$day, mean)
tapply(listings$income_range, listings$day, mean)
tapply(listings$income_verifiable, listings$day, mean)
tapply(listings$monthly_debt, listings$day, mean)
scorex <- listings %>%
group_by(scorex) %>%
summarise(count = n())
plot<-ggplot(data=scorex, aes(x=scorex, y=count, fill =scorex))+
geom_bar(stat="identity" , position = "dodge")
plot
levels(listings$scorex) <- c(600,610,630,645,660,675,695,711,735.5,762, 778)
listings$scorex <- as.numeric(as.character(listings$scorex))
listings$prosper_score <- NULL
listings$income_range   <- NULL
listings$income_range_description  <- NULL
income <- listings %>%
group_by(stated_monthly_income) %>%
summarise(count = n())
str(listings$stated_monthly_income)
plot<-ggplot(data=listings, aes(listings$stated_monthly_income))+
geom_histogram(binwidth = 250) + xlim(0, 50000)
plot
listings$income_verifiable <- factor(listings$income_verifiable)
verifiable <- listings %>%
group_by(income_verifiable) %>%
summarise(count = n())
plot<-ggplot(data=verifiable, aes(x=income_verifiable, y=count, fill=income_verifiable))+
geom_bar(stat="identity" , position = "dodge")
plot
plot<-ggplot(data= listings, aes(x=income_verifiable, y=stated_monthly_income)) + geom_boxplot()  +   coord_cartesian(ylim=c(0, 15000))
plot
loanRatioOne <- listings %>%
filter(dti_wprosper_loan > 1) %>%
summarise(count = n())
loanMax <- listings %>%
filter(dti_wprosper_loan == 1000000) %>%
summarise(count = n())
loanInBetween <- listings %>%
filter(dti_wprosper_loan < 1000000  & dti_wprosper_loan > 1) %>%
summarise(count = n())
listings$dti_wprosper_loan[listings$dti_wprosper_loan == 1000000.00] <- NA
listings$dti_wprosper_loan[is.na(listings$dti_wprosper_loan)] = median(listings$dti_wprosper_loan, na.rm=TRUE)
levels(listings$occupation)[levels(listings$occupation) == ""]<- "Other"
str(listings$employment_status_description)
levels(listings$employment_status_description)
levels(listings$employment_status_description)[levels(listings$employment_status_description) == "Not employed"] <- "Not-employed"
employment <- listings %>%
group_by(employment_status_description) %>%
summarise(count = n())
plot<-ggplot(data=employment, aes(x=employment_status_description, y=count, fill=employment_status_description))+
geom_bar(stat="identity" , position = "dodge")
plot
listingssample <- listings[sample(nrow(listings)),]
listingssample$first_recorded_credit_line <- NULL
#listingssample$borrower_city <- NULL
#listingssample$borrower_state <- NULL
listingssample$occupation <- NULL
listingssample$public_records_last12_months <- NULL
listingssample$lender_indicator <- NULL
listingssample$occupation <- as.factor(listingssample$is_homeowner)
listings$months_employed[listings$months_employed <0] <- NA
listings$months_employed[is.na(listings$months_employed)] = median(listings$months_employed, na.rm=TRUE)
#converts  initials to full name
stateFromLower <-function(x) {
#read 52 state codes into local variable [includes DC (Washington D.C. and PR (Puerto Rico)]
st.codes<-data.frame(
state=as.factor(c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME",
"MI", "MN", "MO", "MS",  "MT", "NC", "ND", "NE", "NH", "NJ", "NM",
"NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN",
"TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")),
full=as.factor(c("alaska","alabama","arkansas","arizona","california","colorado",
"connecticut","district of columbia","delaware","florida","georgia",
"hawaii","iowa","idaho","illinois","indiana","kansas","kentucky",
"louisiana","massachusetts","maryland","maine","michigan","minnesota",
"missouri","mississippi","montana","north carolina","north dakota",
"nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","puerto rico",
"rhode island","south carolina","south dakota","tennessee","texas",
"utah","virginia","vermont","washington","wisconsin",
"west virginia","wyoming"))
)
#create an nx1 data.frame of state codes from source column
st.x<-data.frame(state=x)
#match source codes with codes from 'st.codes' local variable and use to return the full state name
refac.x<-st.codes$full[match(st.x$state,st.codes$state)]
#return the full state names in the same order in which they appeared in the original source
return(refac.x)
}
#convert state name
listings$borrower_state <- trimws(listings$borrower_state)
listings$borrower_state <- as.factor(listings$borrower_state)
listings$region <- stateFromLower(listings$borrower_state)
library(fiftystater)
data("fifty_states")
all_states <- map_data("state")
#plot all states with ggplot
keep <-c("region", "loan_status")
listingsByStates <- listings[keep]
listingsByStates<- listings %>%
group_by(region) %>%
summarise(sum = n(), prop = sum(loan_status == 1)/n())
states <-  distinct(all_states, region, .keep_all = TRUE)
map <- merge(states, listingsByStates, by="region", all.x=F)
p <- ggplot(listingsByStates, aes(map_id = region)) +
# map points to the fifty_states shape data
geom_map(aes(fill = prop), map = fifty_states) +
scale_fill_gradient(low = "yellow", high = "red") +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank()) +
ggtitle("States By Probability of Listings Default")
p + fifty_states_inset_boxes()
col <- read.csv("costofliving.csv")
col <- col[, 1:2]
col$region <- tolower(col$State)
listings<- merge(listings, col, by = "region")
defaultByStateCOL <-listings %>%
group_by(Rank) %>%
summarise(sum = n(), prop = sum(loan_status == "Default")/n())
plot<-ggplot(data=defaultByStateCOL, aes(x=Rank, y=prop, fill = (Rank)))+
geom_bar(stat="identity" ) + geom_smooth()
plot
#cleaning
listings$borrower_city <- trimws(listings$borrower_city)
listings$borrower_city <- tolower(listings$borrower_city)
listings$borrower_city <- as.factor(listings$borrower_city)
citi <- read.csv("gdp_metro0917.csv")
citi$City <- tolower(citi$City)
citi$State <- NULL
library(tidyr)
citi <- citi%>%mutate(City=strsplit(as.character(City),'-'))%>%unnest(City)
citi<-citi[!(citi$City==""),]
listings$is_major_gdp <- ifelse(listings$borrower_city %in% citi$City, "Major", "Not Major")
defaultByGDP<- listings %>%
group_by(is_major_gdp) %>%
summarise(sum = n(), prop = sum(loan_status == 1)/n())
plot<-ggplot(data=defaultByGDP, aes(x=is_major_gdp, y=prop, fill = (is_major_gdp)))+
geom_bar(stat="identity",  position = "dodge")
plot
listingssample$borrower_city <- NULL
listingssample$borrower_state <- NULL
listings_random <- listings[sample(nrow(listings)),]
listings_random
str(listings_random)
listingssample$borrower_city <- NULL
listingssample$borrower_state <- NULL
str(listings_random)
listingssample$borrower_city <- NULL
listingssample$borrower_state <- NULL
listings_random
str(listings_random)
str(listings)
listings$Rank
listingsample <- subset(listings, select = -c("State", "region", "originaldata", "first_recorded_credit_line", "borrower_city", "borrower_state" ) )
listingsample <- subset(listings, select = -c("State", "region", "originaldata", "first_recorded_credit_line", "borrower_city", "borrower_state" ) )
listingsample <- subset(listings, select = c("State", "region", "originaldata", "first_recorded_credit_line", "borrower_city", "borrower_state" ) )
listingsample<- listings[, !(colnames(listings) %in% c("State", "region", "originaldata", "first_recorded_credit_line", "borrower_city", "borrower_state"))]
str(listingsample)
listingsample<- listings[, !(colnames(listings) %in% c("State", "region", "originaldate", "first_recorded_credit_line", "borrower_city", "borrower_state",))]
listingsample<- listings[, !(colnames(listings) %in% c("State", "region", "originaldate", "first_recorded_credit_line", "borrower_city", "borrower_state"))]
str(listingsample)
listingssample$is_homeowner <- as.factor(listingssample$is_homeowner)
listingsample<- listings[, !(colnames(listings) %in% c("State", "region", "originaldate", "first_recorded_credit_line", "borrower_city", "borrower_state", "occupation", "public_records_last12_months"))]
str(listingsample)
listing_rand <- listingsample[order(runif(33300)),]
listing_rlisting_rand
listing_rand
str(listing_rand)
listing_rand$loan_status
l_dummy <-model.matrix(~ . -1, data = listing_rand)
l_dummy <- as.data.frame(scale(l_dummy))
str(l_dummy)
listing_rand <- listingsample[order(runif(33300)),]
l_dummy <- as.data.frame(scale(l_dummy))
l_dummy
train_data_indicies <- sample(1:nrow(l_dummy),
replace = F,
size = floor(nrow(l_dummy) * 0.75))
train_data <- l_dummy[train_data_indicies, ]
test_data <- l_dummy[-train_data_indicies, ]
train_data <- l_dummy[train_data_indicies, ]
test_data <- l_dummy[-train_data_indicies, ]
listing_formula <- colnames(train_data) %>%
{paste(.[! . %in% "loan_status"], collapse = " + ")} %>%
paste("loan_status ~ ", .) %>%
as.formula()
str(train_data)
colnames(train_data)
round(prop.table(table(train_data$loan_status)) * 100, 1)
listing_rand$loan_status <- as.factor(listings_rand$loan_status)
listing_rand$loan_status <- as.factor(listing_rand$loan_status)
listing_rand <- listingsample[order(runif(33300)),]
listing_rand$loan_status <- as.factor(listing_rand$loan_status)
l_dummy <-model.matrix(~ . -1, data = listing_rand)
l_dummy <- as.data.frame(scale(l_dummy))
l_dummy <- as.data.frame(scale(l_dummy))
train_data_indicies <- sample(1:nrow(l_dummy),
replace = F,
size = floor(nrow(l_dummy) * 0.75))
train_data_indicies <- sample(1:nrow(l_dummy),
replace = F,
size = floor(nrow(l_dummy) * 0.75))
train_data <- l_dummy[train_data_indicies, ]
round(prop.table(table(train_data$loan_status)) * 100, 1)
round(prop.table(table(train_data$loan_status)) * 100, 1)
l_dummy
str(l_dummy)
listing_rand <- listingsample[order(runif(33300)),]
str(listing_rand)
listings_labels <- listing_rand[1]
listings_labels
listing_rand$loan_status <- as.factor(listing_rand$loan_status)
listings_labels <- listing_rand[1]
listings_labels
listing_rand <- listingsample[order(runif(33300)),]
listings_labels <- listing_rand[1]
l_dummy <-model.matrix(~ . -1, data = listing_rand[-1])
l_dummy <- as.data.frame(scale(l_dummy))
l_dummy <- as.data.frame(scale(l_dummy))
l_dummy$loan_status <- listings_labels$loan_status
str(l_dummy)
round(prop.table(table(train_data$loan_status)) * 100, 1)
round(prop.table(table(train_data$loan_status)) * 100, 1)
train_data_indicies <- sample(1:nrow(l_dummy),
replace = F,
size = floor(nrow(l_dummy) * 0.75))
train_data <- l_dummy[train_data_indicies, ]
test_data <- l_dummy[-train_data_indicies, ]
round(prop.table(table(train_data$loan_status)) * 100, 1)
str(train_data)
train_data[64]
head(train_data[64])
default_decision_tree <- C5.0(train_data[-64], train_data$loan_status)
library(C50)
library(C50)
default_decision_tree <- C5.0(train_data[-64], train_data$loan_status)
listing_rand$loan_status <- as.factor(listing_rand$loan_status)
listing_rand$listing_rand
listing_rand$loan_status
class(listing_rand$loan_status)
listings_labels <- listing_rand[1]
l_dummy <-model.matrix(~ . -1, data = listing_rand[-1])
l_dummy <- as.data.frame(scale(l_dummy))
l_dummy$loan_status <- listings_labels$loan_status
l_dummy$loan_status
class(l_dummy$loan_status)
train_data_indicies <- sample(1:nrow(l_dummy),
replace = F,
size = floor(nrow(l_dummy) * 0.75))
train_data <- l_dummy[train_data_indicies, ]
test_data <- l_dummy[-train_data_indicies, ]
round(prop.table(table(train_data$loan_status)) * 100, 1)
default_decision_tree <- C5.0(train_data[-64], train_data$loan_status)
default_decision_pred <- predict(default_decision_tree, test_data)
default_decision_pred <- predict(default_decision_tree, test_data)
CrossTable(test_data$loan_status, default_decision_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('Actual Loan Status', 'Predicted Loan Status'))
summary(default_decision_tree)
accuracy <- function(predicted, trueval, model, hideoutput = F) {
stopifnot(length(predicted) == length(trueval))
result <- sum(predicted == trueval) / length(predicted)
if (!hideoutput) {cat("Model:", model, "had", result, "accuracy\n")}
return(result)
}
a1 = accuracy(default_decision_pred, test_data$loan_status, "C5.0 Decision Tree", TRUE)
a1
default_decision_tree
summary(default_decision_tree)
default_decision_tree <- C5.0(train_data[-64], train_data$loan_status, trials = 10)
default_decision_tree
summary(default_decision_tree)
default_decision_pred <- predict(default_decision_tree, test_data)
default_decision_pred <- predict(default_decision_tree, test_data)
CrossTable(test_data$loan_status, default_decision_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('Actual Loan Status', 'Predicted Loan Status'))
a1 = accuracy(default_decision_pred, test_data$loan_status, "C5.0 Decision Tree", TRUE)
a1
train_data[-64]
head(train_data[64])
default_decision_tree <- C5.0(train_data[-64], train_data$loan_status, trials = 3)
default_decision_tree
default_decision_tree
summary(default_decision_tree)
default_decision_tree <- C5.0(train_data[-64], train_data$loan_status, trials = 3)
train_data
str(train_data)
summary(default_decision_tree)
rf <- randomForest(loan_status ~ ., data = train_data)
```{r}
library(randomForest)
rf <- randomForest(loan_status ~ ., data = train_data)
str(train_data)
train_data$employment_status_descriptionFull-loan_origination_date
train_data$`employment_status_descriptionFull-time`
rf <- randomForest(loan_status ~ ., data = train_data)
a7 = accuracy(rf_pred, test_data$left, "Random Forest", TRUE)
listing_formula <- colnames(train_data) %>%
{paste(.[! . %in% "loan_status"], collapse = " + ")} %>%
paste("loan_status ~ ", .) %>%
as.formula()
round(prop.table(table(train_data$loan_status)) * 100, 1)
listingsample<- listings[, !(colnames(listings) %in% c("State", "region", "originaldate", "first_recorded_credit_line", "borrower_city", "borrower_state", "occupation", "public_records_last12_months"))]
str(listingsample)
set.seed(12345)
listing_rand <- listingsample[order(runif(33300)),]
listing_rand$loan_status <- as.factor(listing_rand$loan_status)
listings_labels <- listing_rand[1]
l_dummy <-model.matrix(~ . -1, data = listing_rand[-1])
l_dummy$loan_status <- listings_labels$loan_status
str(l_dummy)
l_dummy <-model.matrix(~ . -1, data = listing_rand[-1])
l_dummy <- as.data.frame(scale(l_dummy))
l_dummy <- as.data.frame(scale(l_dummy))
l_dummy$loan_status <- listings_labels$loan_status
str(l_dummy)
listing_formula <- colnames(train_data) %>%
{paste(.[! . %in% "loan_status"], collapse = " + ")} %>%
paste("loan_status ~ ", .) %>%
as.formula()
default_decision_tree <- C5.0(train_data[-64], train_data$loan_status, trials = 3)
default_decision_tree <- C5.0(train_data[-64], train_data$loan_status, trials = 3)
default_decision_tree
default_decision_tree
summary(default_decision_tree)
train_data$loan_status
test_data$loan_status
default_decision_tree
default_decision_tree <- C5.0(train_data[-64], train_data$loan_status, trials = 3)
default_decision_tree
summary
summary(default_decision_tree)
str(train_data)
